esphome:
  name: desk
  includes:
    - deskcontrol/ExetaDeskState.h

esp8266:
  board: d1_mini

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: 'secure_key' # TODO: replace key

ota:
  platform: esphome
  password: 'secure_password' # TODO: replace password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

substitutions:
  min_height: '62'
  max_height: '128'
  moving_up_stop_delta: '0.5'
  moving_down_stop_delta: '0.7'

uart:
  id: uart_bus
  tx_pin: D6
  rx_pin: D5
  baud_rate: 9600

output:
  - platform: gpio
    pin: D1
    id: gpio_d1
    inverted: true
  - platform: gpio
    pin: D2
    id: gpio_d2
    inverted: true
  - platform: gpio
    pin: D3
    id: gpio_d3
    inverted: true
  - platform: gpio
    pin: D4
    id: gpio_d4
    inverted: true

globals:
  - id: desk_height
    type: float
    restore_value: true
    initial_value: '62'

custom_component:
  - id: uart_state
    lambda: |-
      auto state_sensor = new ExetaDeskState(id(uart_bus));
      App.register_component(state_sensor);
      return {state_sensor};

script:
  - id: unset_all
    then:
      - output.turn_off: gpio_d1
      - output.turn_off: gpio_d2
      - output.turn_off: gpio_d3
      - output.turn_off: gpio_d4

sensor:
  - platform: template
    lambda: !lambda |-
      return id(desk_height);
    name: desk_height
    id: height_sensor
    unit_of_measurement: cm
    accuracy_decimals: 1
    device_class: distance
    icon: mdi:arrow-expand-vertical
    filters:
      - filter_out: NaN
    on_value:
      then:
        - cover.template.publish:
            id: desk_cover
            position: !lambda |-
              float position = (float(x) - float(${min_height})) / (float(${max_height}) - float(${min_height}));
              return position;
        - component.update: height_input

cover:
  - platform: template
    id: 'desk_cover'
    icon: mdi:desk
    name: 'Desk'
    device_class: blind # makes it easier to integrate with Google/Alexa
    has_position: true
    position_action:
      - cover.stop: desk_cover
      - if:
          condition:
            - lambda: !lambda |-
                return pos > id(desk_cover).position;
          then:
            - cover.open: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_cover).position >= pos;
            - script.execute:
                id: unset_all
          else:
            - cover.close: desk_cover
            - wait_until:
                lambda: |-
                  return id(desk_cover).position <= pos;
            - script.execute:
                id: unset_all
    stop_action:
      - script.execute:
          id: unset_all
    open_action:
      - if:
          condition:
            not:
              - lock.is_unlocked: input_lock
          then:
            - lock.unlock: input_lock
            - delay: 3s
      - script.execute:
          id: unset_all
      - delay: 750ms
      - output.turn_on: gpio_d2
    close_action:
      - if:
          condition:
            not:
              - lock.is_unlocked: input_lock
          then:
            - lock.unlock: input_lock
            - delay: 3s
      - script.execute:
          id: unset_all
      - delay: 750ms
      - output.turn_on: gpio_d3
    optimistic: false

number:
  - platform: template
    lambda: !lambda |-
      return id(height_sensor).state;
    name: desk_height
    id: height_input
    unit_of_measurement: cm
    mode: box
    step: 0.1
    min_value: ${min_height}
    max_value: ${max_height}
    device_class: 'distance'
    set_action:
      - if:
          condition:
            - lambda: !lambda |-
                return x > id(height_sensor).state;
          then:
            - cover.open: desk_cover
            - wait_until:
                lambda: |-
                  return id(height_sensor).state  >= x - ${moving_up_stop_delta};
            - script.execute:
                id: unset_all
          else:
            - cover.close: desk_cover
            - wait_until:
                lambda: |-
                  return id(height_sensor).state <= x + ${moving_down_stop_delta};
            - script.execute:
                id: unset_all

lock:
  - platform: template
    name: desk_input
    entity_category: config
    id: input_lock
    lambda: |-
      return {};
    unlock_action:
      - lock.template.publish:
          id: input_lock
          state: UNLOCKING
      - script.execute:
          id: unset_all
      - output.turn_on: gpio_d4
      - delay: 3s
      - script.execute:
          id: unset_all
    lock_action:
      - lock.template.publish:
          id: input_lock
          state: LOCKING
      - script.execute:
          id: unset_all
      - output.turn_on: gpio_d4
      - delay: 3s
      - script.execute:
          id: unset_all

button:
  - platform: template
    name: desk_mode_1
    id: button_mode_1
    icon: mdi:numeric-1-box
    on_press:
      - if:
          condition:
            not:
              - lock.is_unlocked: input_lock
          then:
            - lock.unlock: input_lock
            - delay: 3s
      - output.turn_on: gpio_d1
      - delay: 750ms
      - script.execute:
          id: unset_all
  - platform: template
    name: desk_mode_2
    id: button_mode_2
    icon: mdi:numeric-2-box
    on_press:
      - if:
          condition:
            not:
              - lock.is_unlocked: input_lock
          then:
            - lock.unlock: input_lock
            - delay: 3s
      - output.turn_on: gpio_d2
      - output.turn_on: gpio_d3
      - delay: 750ms
      - script.execute:
          id: unset_all
  - platform: template
    name: desk_mode_3
    id: button_mode_3
    icon: mdi:numeric-3-box
    on_press:
      - if:
          condition:
            not:
              - lock.is_unlocked: input_lock
          then:
            - lock.unlock: input_lock
            - delay: 3s
      - output.turn_on: gpio_d1
      - output.turn_on: gpio_d3
      - delay: 750ms
      - script.execute:
          id: unset_all
